# Docker Compose for Scalable Tank Monitoring System
version: '3.8'

services:
  # Main application
  tank-monitor-app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://tank_user:tank_pass@postgres:5432/tank_monitoring
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
      - background-processor
    restart: unless-stopped

  # Background processor service
  background-processor:
    build:
      context: .
      dockerfile: Dockerfile.processor
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://tank_user:tank_pass@postgres:5432/tank_monitoring
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=tank_monitoring
      - POSTGRES_USER=tank_user
      - POSTGRES_PASSWORD=tank_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Optional: InfluxDB for time-series data (future upgrade)
  influxdb:
    image: influxdb:2.7-alpine
    environment:
      - INFLUXDB_DB=tank_monitoring
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin_password
      - INFLUXDB_USER=tank_user
      - INFLUXDB_USER_PASSWORD=tank_password
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    restart: unless-stopped
    profiles:
      - influxdb
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Optional: Grafana for monitoring (future upgrade)
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    restart: unless-stopped
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  grafana_data:

networks:
  default:
    driver: bridge